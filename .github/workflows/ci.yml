name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5.5.0
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies
      - name: Build (Install Dependencies)
        run: pip install -r requirements.txt
      - name: Run Application 
        run: | 
          nohup python app.py > app.log 2>&1 &
          sleep 3s
          cat app.log
      - name: Unit test 
        run: | 
          response_code=$(curl -o /dev/null -s -v -w "%{http_code}" http://localhost:5000)
          if [ "$response_code" -eq 200 ]; then      # Assert application is up and running
            echo "Health check completed successfully: HTTP status code is $response_code."
          else
            echo "Health check failed: HTTP status code is $response_code."
            exit 1          
          fi
          curl -vv http://localhost:5000/health
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Export Docker Image
        uses: docker/build-push-action@v6
        with:
          tags: entry-tracker:latest
          outputs: type=docker,dest=${{ runner.temp }}/entry-tracker.tar
      - name: Upload Docker Image artifact
        uses: actions/upload-artifact@v4
        with:
          name: entry-tracker
          path: ${{ runner.temp }}/entry-tracker.tar
          overwrite: true
          retention-days: 7
          if-no-files-found: error
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    env:
      DB_PORT: 3306
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{secrets.DB_PASSWORD }}
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4
      - name: Initialize Environment Variables 
        run: echo "${{ secrets.ENV_FILE }}" > .env
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: entry-tracker
          path: ${{ runner.temp }}
      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/entry-tracker.tar
          docker images
      - name: Deploy Application With Docker Compose
        run: |
          pwd 
          ls -la
          docker compose up -d
          docker ps -a
      - name: Run E2E Test
        run: | 
          sleep 3s
          response_code=$(curl -o /dev/null -s -v -w "%{http_code}" http://localhost:5000)
          if [ "$response_code" -eq 200 ]; then      # Assert application is up and running
            echo "Health check completed successfully: HTTP status code is $response_code."
          else
            echo "Health check failed: HTTP status code is $response_code."
            exit 1          
          fi
          curl -vv http://127.0.0.1:5000/health
          curl -vv http://127.0.0.1:5000/
        
        
          
          
        
