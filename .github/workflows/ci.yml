name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5.5.0
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies
      - name: Build (Install Dependencies)
        run: pip install -r requirements.txt
      - name: Run Application 
        run: | 
          nohup python app.py > app.log 2>&1 &
          sleep 3s
          cat app.log
      - name: Unit test 
        run: | 
          response_code=$(curl -o /dev/null -s -v -w "%{http_code}" http://localhost:5000)
          if [ "$response_code" -eq 200 ]; then      # Assert application is up and running
            echo "Health check completed successfully: HTTP status code is $response_code."
          else
            echo "Health check failed: HTTP status code is $response_code."
            exit 1          
          fi
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Export Docker Image
        uses: docker/build-push-action@v6
        with:
          tags: entry-tracker:latest
          outputs: type=docker,dest=${{ runner.temp }}/entry-tracker.tar
      - name: Upload Docker Image artifact
        uses: actions/upload-artifact@v4
        with:
          name: entry-tracker
          path: ${{ runner.temp }}/entry-tracker.tar
          overwrite: true
          retention-days: 7
          if-no-files-found: error
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    env:
      DB_HOST: mysql
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: entry-tracker
          path: ${{ runner.temp }}
      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/entry-tracker.tar
          docker images
      - name: Deploy Application With Docker Compose
        run: |
          docker compose up -d
      - name: Run E2E Test
        run: | 
          sleep 10s
          response_code=$(curl -o /dev/null -s -v -w "%{http_code}" http://localhost:5000/health)
          if [ "$response_code" -eq 200 ]; then      # Assert application is up and running
            echo "Health check completed successfully: HTTP status code is $response_code."
          else
            echo "Health check failed: HTTP status code is $response_code."
            exit 1          
          fi      
  publish:
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: entry-tracker
          path: ${{ runner.temp }}
      - name: Load image
        run: |
         docker load --input ${{ runner.temp }}/entry-tracker.tar
         docker images
      - name: Login to Public ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1
      - name: Tag Image
        run: docker tag entry-tracker:latest public.ecr.aws/a2q3a8e9/develeap/entry-tracker:latest
      - name: Push Image
        run: docker push public.ecr.aws/a2q3a8e9/develeap/entry-tracker:latest

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    env:
      SECURITY_GROUP_ID: ${{ secrets.AWS_EC2_SG_ID }}
    steps:
      - name: Get Runner's IP # For granting dynamic SSH access 
        run: |
          echo "RUNNER_IP=$(curl -s https://api64.ipify.org)" >> $GITHUB_ENV
      - name: Use Saved IP in Another Step
        run: echo "The runner's IP is $RUNNER_IP"
      - name: Configure AWS Credentials # For Security Groups Maintenance Permission
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_SG_ROLE_ARN }}
          aws-region: ap-south-1
      - name: Add Runner To Security Group
        run: |
          aws ec2 authorize-security-group-ingress --group-id "$SECURITY_GROUP_ID" \
            --protocol tcp --port 22 --cidr "$RUNNER_IP/32"
      - name: Send SSH Key via EC2 Instance Connect
        run: |
          PUBLIC_KEY=$(ssh-keygen -t rsa -b 4096 -f my-key -N "" && cat my-key.pub)
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id ${{ secrets.AWS_EC2_INSTANCE_ID }} \
            --availability-zone ap-south-1a \
            --instance-os-user ubuntu \
            --ssh-public-key "$PUBLIC_KEY"
      - name: Connect to EC2 via SSH
        run: ssh -o StrictHostKeyChecking=no -i my-key ubuntu@ec2-3-108-42-106.ap-south-1.compute.amazonaws.com
      - name: Remove Runner From Security Group 
        run: | 
          aws ec2 revoke-security-group-ingress --group-id "$SECURITY_GROUP_ID" \
            --protocol tcp --port 22 --cidr "$RUNNER_IP/32"
      

            
